// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    pets          Pet[]
    petTags       PetTag[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now()) @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Pet {
    id          String   @id @default(cuid())
    userId      String // Foreign key referencing the User model
    name        String
    type        String
    breed       String
    birthdate   DateTime
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    tags PetTag[] // A list of tags associated with the pet
    // Other fields related to the pet
    user User     @relation(fields: [userId], references: [id])
}

model PetTag {
    id             String        @id @default(cuid())
    petId          String // Foreign key referencing the Pet model
    userId         String // Foreign key referencing the User model
    serialNumber   String        @unique
    qrCode         String
    isActive       Boolean
    registeredDate DateTime
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @default(now()) @updatedAt
    // Other fields related to the pet tag
    pet            Pet           @relation(fields: [petId], references: [id])
    user           User          @relation(fields: [userId], references: [id])
    scanHistories  ScanHistory[]
}

model ScanHistory {
    id          String   @id @default(cuid())
    tagId       String // Foreign key referencing the PetTag model
    scanDate    DateTime
    scannerInfo String?
    // Other fields related to the scan history
    petTag      PetTag   @relation(fields: [tagId], references: [id])
}
