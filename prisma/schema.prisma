generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  phoneNumber   String?
  role          UserRole  @default(user)
  accounts      Account[]
  pets          Pet[]
  petTags       PetTag[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pet {
  id               String        @id @default(cuid())
  userId           String
  name             String
  type             String
  breed            String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  birthdate        DateTime
  description      String?
  gender           Gender        @default(male)
  profileImages    String[]
  socialMediaLinks Json?         @default("{}")
  behaviourTags    String[]      @default([])
  alertsEnabled    Boolean       @default(true)
  user             User          @relation(fields: [userId], references: [id])
  petTags          PetTag[]
  ScanHistory      ScanHistory[]
}

model PetTag {
  id               String        @id @default(cuid())
  petId            String?
  userId           String?
  isActive         Boolean       @default(true)
  registeredDate   DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  registrationCode String?
  qrCodeId         String?       @unique
  pet              Pet?          @relation(fields: [petId], references: [id])
  user             User?         @relation(fields: [userId], references: [id])
  scanHistories    ScanHistory[]

  @@index([qrCodeId], type: Hash)
}

model ScanHistory {
  id          String   @id @default(cuid())
  scannerInfo String?
  geoCode     Json?
  petTagId    String
  scannedAt   DateTime
  petId       String
  pet         Pet      @relation(fields: [petId], references: [id])
  petTag      PetTag   @relation(fields: [petTagId], references: [id])
}

model Product {
  id              String   @id @default(cuid())
  parentProductId String? // Nullable. If null, this product is a standalone or a parent product. If not, it's a variant of the product with this ID.
  name            String
  description     String
  price           Float
  discount        Float    @default(0)
  images          String[]
  attributes      Json? // JSON field to store variant-specific attributes like size, color, etc. [{name: "color", value: "red"}, {name: "size", value: "10 CM * 10 CM * 20 CM"  }]
  details         Json? // JSON field to store arbitrary details about the product. [{title: TITIE, data: EDITOR_JS_DATA}]
  customisations   Json? // JSON field to store customisation details of the product. [{imageUrl: IMAGE_URL, attributes: [{name: "Name", startXRatio: 0, startYRatio: 0, endXRatio: 100, endYRatio: 100}]}]

  parentProduct Product?  @relation("ProductToProductParent", fields: [parentProductId], references: [id]) // Relation to itself (parent product).
  variants      Product[] @relation("ProductToProductParent") // Relation to itself (variants of the product).

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([parentProductId], name: "parentProductId_idx")
}

enum UserRole {
  user
  admin
}

enum Gender {
  male
  female
}
